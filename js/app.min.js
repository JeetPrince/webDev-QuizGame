class QuizAPI{async getCategories(){const a=await fetch("https://jeetprince.github.io/webDev-QuizGame/json/categories.json"),b=await a.json();return{categoriesList:b}}async getQuestions(a,b){let c="any"!==a&&"any"!==b?`https://opentdb.com/api.php?amount=1&category=${a}&difficulty=${b}`:`https://opentdb.com/api.php?amount=1`;const d=await fetch(c),e=await d.json();return{questionsList:e}}}class UI{constructor(){this.init()}init(){this.loadApp(),this.loadCategories()}loadApp(){document.getElementById("main").innerHTML="\n        <div class=\"container\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <div class=\"primary-underline\"></div>\n                    <h1 class=\"card-title\">Enter your requirements</h1>\n                    <div id=\"errors\"></div>\n                </div>\n                <div class=\"card-body\">\n                    <form action=\"#\" id=\"form\" class=\"quizStartForm\">\n                        <div class=\"form-group\">\n                            <label for=\"number-of-questions\">Number of questions:</label>\n                            <input type=\"number\" id=\"number-of-questions\" class=\"form-control\" value=\"10\">\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"category\">Select Category</label>\n                            <select class=\"form-control\" id=\"category\">\n                                \n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"difficulty\">Select Difficulty Level</label>\n                            <select class=\"form-control\" id=\"difficulty\">\n                                <option value=\"any\">Any</option>\n                                <option value=\"easy\">Easy</option>\n                                <option value=\"medium\">Medium</option>\n                                <option value=\"hard\">Hard</option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <input type=\"submit\" class=\"form-control btn btn-primary\" value=\"Start Quiz\">\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>"}loadCategories(){quizAPI.getCategories().then(a=>{const b=a.categoriesList;b.forEach(a=>{const b=document.createElement("option");b.value=a.id,b.appendChild(document.createTextNode(a.category));const c=document.getElementById("category");c.appendChild(b)})})}loadQuestion(a,b,c,d,e){document.getElementById("app").innerHTML="";let f=`
        <div class="container">
            <div class="card">
                <div class="card-header">
                    <h1 class="card-title text-light">Question ${d} (${e} remaining)</h1>
                    <div id="result" class="results">
                        <div class="result"><span class="option">${b}</span> Correct</div>
                        <div class="result"><span class="option">${c}</span> Incorrect</div>
                    </div>
                </div>
                <div class="card-body">
                    <h2 class="question">
                        ${a[0].question}
                    </h2>
                    <p class="text-light">Answer options</p>
                    <div id="errors"></div>
                    <form action="#" id="quizAnswerForm">
            `;const g=a[0].incorrect_answers,h=a[0].correct_answer;g.splice(Math.floor(Math.random()*a[0].incorrect_answers.length+1),0,h);let j=65;for(let h=0;h<a[0].incorrect_answers.length;h++)f+=`
                <div class="form-group">
                    <input type="radio" id="answer-${g[h]}" class="form-control form-checkbox userAttemptedAnswer" value="${g[h]}" name="answer">
                    <label class="select-option" for="answer-${g[h]}"><span class="option">${String.fromCharCode(j)}</span> ${g[h]}</label>
                </div>
                `,j++;f+=`
                            <div class="form-group center">
                                <button type="submit" id="clearBtn" class="btn btn-secondary">Clear</button>
                                <button type="submit" id="answerBtn" class="btn btn-primary">Send Answer</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>`,document.getElementById("app").innerHTML=f,submitAnswer(h)}loadResults(a,b){document.getElementById("app").innerHTML="",document.getElementById("results").innerHTML=`
            <div class="container">
                <div class="card">
                    <div class="card-header">
                        <div class="primary-underline"></div>
                        <h1 class="card-title"><i class="icofont-ui-note mix-color"></i> Your Results</h1>
                    </div>
                    <div class="card-body">
                        <div class="answer">
                            <i class="icon answer-correct-icon"></i>
                            <span>Correct Answers: </span> ${a}
                        </div>
                        <div class="answer">
                            <i class="icon answer-wrong-icon"></i>
                            <span>Incorrect Answers: </span> ${b}
                        </div>
                        <div class="countdown-timer">
                            <div class="alert alert-danger text-center">
                                Taking you back to the home page in 10 seconds.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            `,setTimeout(()=>{window.location.reload()},8e3)}displayMessage(a,b){const c=document.createElement("div");c.className=b,c.appendChild(document.createTextNode(a)),document.getElementById("errors").appendChild(c),setTimeout(function(){document.querySelector("#errors div").remove()},3e3)}}let correctAnswers=0,incorrectAnswers=0,attemptedQuestions=1,amountOfQuestions="any",categorySelected="any",difficultyLevel="any";const quizAPI=new QuizAPI,ui=new UI;loadEventListeners();function loadEventListeners(){document.addEventListener("DOMContentLoaded",()=>{document.getElementById("non-loaders").style.display="none",document.getElementById("loader").style.display="block",setTimeout(function(){document.getElementById("loader").style.display="none",document.getElementById("non-loaders").style.display="block"},2e3),document.querySelector(".quizStartForm").addEventListener("submit",a=>{a.preventDefault(),amountOfQuestions=document.getElementById("number-of-questions").value,categorySelected=document.getElementById("category").value,difficultyLevel=document.getElementById("difficulty").value,0<amountOfQuestions?fetchQuestions(categorySelected,difficultyLevel,amountOfQuestions):ui.displayMessage("* Minimum questions to attempt must be 5.","alert alert-danger text-center")})})}function submitAnswer(a){document.getElementById("answerBtn").addEventListener("click",b=>{b.preventDefault();const c=document.querySelector("input[name=\"answer\"]:checked");null===c?ui.displayMessage("* Please select at least one option","alert alert-danger text-center"):(a===c.value?correctAnswers++:incorrectAnswers++,1<amountOfQuestions?(attemptedQuestions++,amountOfQuestions--,fetchQuestions(categorySelected,difficultyLevel,amountOfQuestions)):ui.loadResults(correctAnswers,incorrectAnswers))})}function fetchQuestions(a,b,c){if(document.getElementById("main").innerHTML="",document.getElementById("app").innerHTML="",document.getElementById("loader").style.display="block",0!==c){quizAPI.getQuestions(a,b).then(a=>{document.getElementById("loader").style.display="none",ui.loadQuestion(a.questionsList.results,correctAnswers,incorrectAnswers,attemptedQuestions,c)})}}